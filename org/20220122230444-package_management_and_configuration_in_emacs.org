:PROPERTIES:
:ID:       8924b05d-a97d-4507-93ec-0cb3a1d3af5e
:END:
#+title: Package management and configuration in emacs

What's the best way to manage packages in [[id:5861e294-d990-4163-b470-8af821ff986b][emacs]]? I've tried quite a few and prefer 

* package.el (builtin)

I used this until I ran into two problems:

- Using packages not yet in elpa or melpa easily from github
- [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=34341#19]["https://elpa.gnu.org/packages/archive-contents" "Bad Request"]]

Maybe now there are better solutions, but I moved on to [[*straight.el][straight.el]]

* straight.el

Straight worked well for me for some time, and I could really relate to parts of it's readme given I was already into [[id:25626fcc-e67b-4b44-be44-92d28f244bef][Haskell]] and [[id:4d24c424-8b8b-4f35-97eb-ed8eee51f8ec][NixOS]]:

#+begin_quote
Next-generation, purely functional package manager
#+end_quote

#+begin_quote
Init-file and version lockfiles as the sole source of truth. No persistent state kept elsewhere.
#+end_quote

#+begin_quote
100% reproducible package management, accounting for changes in packages, recipe repositories, configuration, and the package manager itself.
#+end_quote

In practice though, I kept running into some issue where I had to keep re-running the =straight-check-packages= command or likely some other command.

You can see other [[https://github.com/raxod502/straight.el/issues?q=is%3Aissue+is%3Aopen+label%3Adependencies][reproducability issues]] in the straight.el issue tracker. I still turn to straight anywhere I can't just use [[*NixOS][NixOS]] though.

* NixOS

#+begin_quote
Nix builds packages in isolation from each other. This ensures that they are reproducible and don't have undeclared dependencies, so if a package works on one machine, it will also work on another. 
#+end_quote

Given my struggles with [[*package.el (builtin)][package.el]] and [[*straight.el][straight.el]], this sounded great!

From experience I knew [[id:72bee964-b609-4624-9add-b4d22218b7cd][NixOS has a steep learning curve]], but I'd already paid parts of it while trying to [[id:4fd344f2-0b51-4783-a739-2d6df228b38d][develop Haskell projects using NixOS]].

Essentially you add emacs packages to your [[id:4d24c424-8b8b-4f35-97eb-ed8eee51f8ec][NixOS]] configuratin and make [[id:5861e294-d990-4163-b470-8af821ff986b][emacs]] assume the packages will be in load-path somehow just as if you'd cloned them and then configure them normally.

To my surprise I've had 0 issues with this method of [[id:8924b05d-a97d-4507-93ec-0cb3a1d3af5e][Package management and configuration in emacs]].

For more details on this, see [[id:baf8c711-6b4c-49f1-aa66-4da6d56d4ac7][Replacing straight.el with Nix to manage my emacs packages]].
